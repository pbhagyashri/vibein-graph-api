scalar Date

type PostAuthor {
	id: String!
	username: String!
	email: String!
}

type Post {
	id: String!
	title: String!
	content: String!
	likes: Int!
	author: PostAuthor!
	authorId: String!
	createdAt: Date
	updatedAt: Date
}

type User {
	id: String!
	username: String!
	email: String!
	createdAt: Date
	updatedAt: Date
}

type AuthResponse {
	user: User!
	accessToken: String!
}

input LoginRequestBody {
	password: String!
	email: String!
}

input RegisterRequestBody {
	username: String!
	password: String!
	email: String!
}

input CreatePostRequestBody {
	title: String!
	content: String!
	authorId: String!
}

input UpdatePostRequestBody {
	title: String!
	content: String!
	authorId: String!
	likes: Int!
}

input GetPostsRequestBody {
	limit: String!
	cursor: String
}

type Query {
	getPosts(inputs: GetPostsRequestBody!): [Post!]!
	getPost(id: String!): Post!
	getUsers: [User!]!
	me: User!
}

type Mutation {
	createPost(inputs: CreatePostRequestBody!): Post!
	updatePost(inputs: UpdatePostRequestBody!): Post!
	deletePost: ID!
	register(inputs: RegisterRequestBody!): AuthResponse!
	login(inputs: LoginRequestBody!): AuthResponse!
}

# Cursor based pagination with GraphQL blog post
# https://blog.logrocket.com/implement-cursor-based-pagination-graphql/
