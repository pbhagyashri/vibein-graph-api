/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/register": {
    /** @description Register a new user */
    post: {
      /** @description Register a new user */
      requestBody: {
        content: {
          "application/json": {
            /** @default ganesh@test.com */
            email: string;
            /** @default ganesh */
            password: string;
            /** @default ganesh */
            username: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/login": {
    /** @description Authenticate an existing user */
    post: {
      /** @description Authenticate an existing user */
      requestBody: {
        content: {
          "application/json": {
            /** @default ganesh@test.com */
            email: string;
            /** @default ganesh */
            password: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/logout": {
    /** @description Logout an existing user */
    post: {
      /** @description Logout an existing user */
      requestBody?: {
        content: {
          "application/json": {
            /** @default ganesh@test.com */
            email: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "text/plain": string;
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts?cursor={cursor}&limit={limit}": {
    /** @description Get all posts */
    get: {
      parameters: {
        query: {
          /** @description description regarding limit */
          limit: string;
          /** @description description regarding limit */
          cursor?: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Posts"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts": {
    /** @description Create a new post */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @default New Post */
            title: string;
            /** @default This is a new post */
            content: string;
            /** @default 79856e58-eaa8-4ee4-86dd-d78275e78b6e */
            authorId: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts/{id}": {
    /** @description Get a post by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
    /** @description Delete post */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Post deleted successfully */
        200: {
          content: never;
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/users/{id}/posts": {
    /** @description Get users posts */
    get: {
      parameters: {
        path: {
          undefined: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Posts"];
          };
        };
        /** @description Could not get users */
        400: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      record: {
        id: string;
        username: string;
        email: string;
        createdAt?: string;
        updatedAt?: string;
      };
      accessToken: string;
    };
    Posts: {
      record: {
          id: string;
          title: string;
          content: string;
          likes: number;
          authorId: string;
          createdAt?: string;
          updatedAt?: string;
          author: {
            id: string;
            username: string;
            email: string;
          };
        }[];
      /** @default 200 */
      status: number;
    };
    Post: {
      record: {
        id: string;
        title: string;
        content: string;
        likes: number;
        authorId: string;
        createdAt?: string;
        updatedAt?: string;
        author: {
          id: string;
          username: string;
          email: string;
        };
      };
      /** @default 200 */
      status: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
