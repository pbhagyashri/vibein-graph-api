/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/authors/{authorId}/posts?limit={limit}": {
    /** @description Get users posts */
    get: {
      parameters: {
        query: {
          /**
           * @description limits the number of posts returned
           * @default 5
           */
          limit: string;
        };
        path: {
          authorId: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["AuthorPost"];
          };
        };
        /** @description Could not get users */
        400: {
          content: never;
        };
      };
    };
  };
  "/authors/{authorId}/posts": {
    /** @description Create a new post */
    post: {
      parameters: {
        path: {
          authorId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @default New Post */
            title: string;
            /** @default This is a new post */
            content: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["AuthorPost"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/me": {
    /** @description Get current logged in user */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Could not get users */
        400: {
          content: never;
        };
      };
    };
  };
  "/authors/{authorId}/posts/{postId}": {
    /** @description Update post */
    patch: {
      parameters: {
        path: {
          authorId: string;
          postId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @default Update Title Again */
            title?: string;
            /** @default Update Content Again */
            content?: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["AuthorPost"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/register": {
    /** @description Register a new user */
    post: {
      /** @description Register a new user */
      requestBody: {
        content: {
          "application/json": {
            /** @default reva@test.com */
            email: string;
            /** @default reva */
            password: string;
            /** @default reva */
            username: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/login": {
    /** @description Authenticate an existing user */
    post: {
      /** @description Authenticate an existing user */
      requestBody: {
        content: {
          "application/json": {
            /** @default reva@test.com */
            email: string;
            /** @default reva */
            password: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/logout": {
    /** @description Logout an existing user */
    post: {
      /** @description Logout an existing user */
      requestBody?: {
        content: {
          "application/json": {
            /** @default ganesh@test.com */
            email: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "text/plain": string;
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/refresh-token": {
    /** @description Returns an access token upon successful validation of the refresh token */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Invalid status value */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts?limit={limit}": {
    /** @description Get all posts */
    get: {
      parameters: {
        query: {
          /** @description limits the number of posts returned */
          limit: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts?cursor[id]={id}%[createdAt]={createdAt}&limit={limit}": {
    /** @description Get all posts */
    get: {
      parameters: {
        query: {
          /** @description limits the number of posts returned */
          limit: number;
          cursor?: {
            /** @default 55163961-1d19-46bb-9347-993ba9740a69 */
            id?: string;
            /**
             * Format: date-time
             * @default 2024-02-23T18:38:45.472Z
             */
            createdAt?: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts/{id}": {
    /** @description Get a post by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
  "/posts": {
    /** @description Add likes to a post */
    patch: {
      requestBody: {
        content: {
          "application/json": {
            /** @default b8e61310-69d6-4c7a-a6de-003f725463dc */
            userId: string;
            /** @default 60255cf6-43e3-4734-86c7-a4f8ddb018fb */
            postId: string;
          };
        };
      };
      responses: {
        /** @description Post liked successfully */
        200: {
          content: never;
        };
        /** @description Could not get posts */
        400: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      record: {
        id: string;
        username: string;
        email: string;
        createdAt?: string;
        updatedAt?: string;
      };
      accessToken: string;
      /** @default 200 */
      status?: number;
    };
    AuthorPost: {
      /** @default 200 */
      status: number;
      record: {
        /** @default false */
        hasPreviousPage: boolean;
        /** @default false */
        hasNextPage: boolean;
        record?: {
            id: string;
            title: string;
            content: string;
            likes: number;
            authorId: string;
            createdAt?: string;
            updatedAt?: string;
          }[];
      };
    };
    Post: {
      /** @default 200 */
      status?: number;
      record?: {
        /** @default false */
        hasPreviousPage?: boolean;
        /** @default false */
        hasNextPage?: boolean;
        posts?: {
            id?: string;
            title?: string;
            content?: string;
            likes?: number;
            authorId?: string;
            createdAt?: string;
            updatedAt?: string;
            author?: {
              id?: string;
              username?: string;
              email?: string;
            };
          }[];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
